'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getLocationFromRouteSet;

var _joinPaths = require('./utils/joinPaths');

var _joinPaths2 = _interopRequireDefault(_joinPaths);

var _PatternUtils = require('./utils/PatternUtils');

var _Params = require('./Params');

var _desugarNext = require('./desugarNext');

var _desugarNext2 = _interopRequireDefault(_desugarNext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getJunctionsLocation(isRouteInPath, parentJunctionPath, junctionSet, routeSet) {
  var path = void 0;
  var state = {};
  var query = {};

  var routeKeys = Object.keys(routeSet);
  for (var i = 0, len = routeKeys.length; i < len; i++) {
    var routeKey = routeKeys[i];
    var junctionPath = parentJunctionPath.concat(routeKey);
    var route = routeSet[routeKey];

    if (route) {
      var branch = route.branch;
      var serializedParams = (0, _Params.serializeParams)(branch.paramTypes, route.params);

      var isPrimaryRoute = isRouteInPath && junctionSet.$$junctionSetMeta.primaryKey == routeKey;
      if (isPrimaryRoute) {
        for (var _i = 0, _len = branch.queryKeys.length; _i < _len; _i++) {
          var key = branch.queryKeys[_i];
          var value = serializedParams[key];
          if (value !== undefined && route.params[key] !== branch.paramTypes[key].default) {
            query[key] = value;
          }
          delete serializedParams[key];
        }

        path = (0, _PatternUtils.formatPattern)(branch.pattern, serializedParams);
      } else {
        state[junctionPath.join('#')] = {
          branchKey: branch.key,
          serializedParams: serializedParams
        };
      }

      if (branch.next) {
        var childLocation = getJunctionsLocation(isPrimaryRoute, junctionPath, branch.next, route.childRouteSet);

        Object.assign(state, childLocation.state);
        Object.assign(query, childLocation.query);

        if (childLocation.path) {
          path += '/' + childLocation.path;
        }
      }
    }
  }

  return { state: state, path: path, query: query };
}

// Convert routes into a Location object for the `history` package,
// which is used to actually perform navigation.
//
// See https://github.com/mjackson/history
function getLocationFromRouteSet(baseLocation, isRouteInPath, parentJunctionPath, junctionSet, routes) {
  var routeSet = (0, _desugarNext2.default)(junctionSet, routes);

  var _getJunctionsLocation = getJunctionsLocation(isRouteInPath, parentJunctionPath, junctionSet, routeSet),
      state = _getJunctionsLocation.state,
      path = _getJunctionsLocation.path,
      query = _getJunctionsLocation.query;

  var baseState = baseLocation.state || {};
  var finalQuery = Object.assign({}, baseLocation.query, query);

  return {
    pathname: (0, _joinPaths2.default)(baseLocation.pathname, path),
    hash: baseLocation.hash,
    state: Object.assign({}, baseState, { $$junctions: Object.assign(state, baseState.$$junctions) }),
    key: baseLocation.key,
    query: finalQuery
  };
}