'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getRouteSetFromLocation;

var _Routes = require('./Routes');

var _Params = require('./Params');

var _omit = require('./utils/omit');

var _omit2 = _interopRequireDefault(_omit);

var _joinPaths = require('./utils/joinPaths');

var _joinPaths2 = _interopRequireDefault(_joinPaths);

var _PatternUtils = require('./utils/PatternUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getRouteBaseLocation(parentBaseLocation, isRouteInPath, junctionPath, branch, params) {
  if (isRouteInPath) {
    var queryParams = {};
    for (var i = 0, len = branch.queryKeys.length; i < len; i++) {
      var key = branch.queryKeys[i];
      var value = params[key];
      if (value !== undefined && value !== branch.paramTypes[key].default) {
        queryParams[key] = value;
      }
    }

    var serializedQuery = (0, _Params.serializeParams)(branch.paramTypes, queryParams);
    var serializedPathParams = (0, _Params.serializeParams)(branch.paramTypes, (0, _omit2.default)(params, branch.queryKeys));

    var query = Object.assign({}, serializedQuery, parentBaseLocation.query);
    return {
      pathname: (0, _joinPaths2.default)(parentBaseLocation.pathname, (0, _PatternUtils.formatPattern)(branch.pattern, serializedPathParams)),
      query: query,
      hash: parentBaseLocation.hash,
      state: parentBaseLocation.state,
      key: parentBaseLocation.key
    };
  } else {
    var baseState = parentBaseLocation.state || {};

    return {
      pathname: parentBaseLocation.pathname,
      query: parentBaseLocation.query,
      hash: parentBaseLocation.hash,
      state: Object.assign({}, baseState, {
        $$junctions: Object.assign({}, baseState.$$junctions, _defineProperty({}, junctionPath.join('#'), {
          branchKey: branch.key,
          serializedParams: (0, _Params.serializeParams)(branch.paramTypes, params)
        }))
      }),
      key: parentBaseLocation.key
    };
  }
}

function createLocatedRouteSetFor(junctionSetMeta, parentRouteOptions) {
  var routeSetOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var routeSet = {};
  var junctionKeys = junctionSetMeta.junctionKeys;

  for (var i = 0, len = junctionKeys.length; i < len; i++) {
    var key = junctionKeys[i];

    if (routeSetOptions[key]) {
      var routeOptions = routeSetOptions[key];
      var childJunctionSet = junctionSetMeta.junctions[key].$$junctionMeta.branches[routeOptions.branch.key].next;
      var routeNext = childJunctionSet && createLocatedRouteSetFor(childJunctionSet.$$junctionSetMeta, routeOptions, routeOptions.next);

      routeSet[key] = new _Routes.LocatedRoute(routeOptions.baseLocation, routeOptions.isRouteInPath, routeOptions.junctionPath, routeOptions.branch, routeOptions.params, routeNext);
    } else {
      var junctionMeta = junctionSetMeta.junctions[key].$$junctionMeta;

      if (junctionMeta.defaultKey) {
        var branch = junctionMeta.branches[junctionMeta.defaultKey];
        var routeJunctionPath = parentRouteOptions.junctionPath.concat(key);
        var isBranchRouteInPath = parentRouteOptions.isRouteInPath && key == junctionSetMeta.primaryKey;
        var routeParams = (0, _Params.addDefaultParams)(branch.paramTypes);
        var routeBaseLocation = getRouteBaseLocation(parentRouteOptions.baseLocation, parentRouteOptions.isRouteInPath, routeJunctionPath, branch, routeParams);

        var defaultRouteOptions = {
          baseLocation: routeBaseLocation,
          isRouteInPath: isBranchRouteInPath,
          junctionPath: routeJunctionPath,
          branch: branch,
          params: routeParams
        };

        var _routeNext = branch.next && createLocatedRouteSetFor(branch.next.$$junctionSetMeta, defaultRouteOptions);

        routeSet[key] = new _Routes.LocatedRoute(routeBaseLocation, isBranchRouteInPath, routeJunctionPath, branch, routeParams, _routeNext);
      }
    }
  }

  return routeSet;
}

function getRouteSetFromLocation(parsePath, baseLocation, junctionSet, location) {
  // TODO:
  // - memoize by object equality of the previous invocation (only need memory size of 1)

  // TODO:
  // - if junctionSet's main junction is a hostname junction, merge the hostname into the
  //   beginning of the location path

  var basePath = baseLocation.pathname || '';

  var locationState = location.state || {};

  var path = void 0;
  if (basePath) {
    if (location.pathname.indexOf(basePath) === -1) {
      throw new Error('The specified "location" and "baseLocation" don\'t match. Expected location to start with "' + basePath + '" but instead found "' + location.path + '".');
    }

    path = location.pathname.substr(basePath.length);
  } else {
    path = location.pathname || '';
  }

  var query = (0, _omit2.default)(location.query, Object.keys(baseLocation.query));
  var pathState = {};
  if (path !== '') {
    pathState = parsePath(path, query);
    if (!pathState) {
      return;
    }
  }

  var state = Object.assign({}, locationState.$$junctions, pathState);
  var routeSetOptions = {};
  var baseSet = {};
  var rootParentOptions = {
    baseLocation: baseLocation,
    isRouteInPath: true,
    junctionPath: []
  };

  var walkOrder = Object.keys(state).sort();

  if (walkOrder.length === 0) {
    // We have a valid path but no state, so use defaults on the root junctions
    var _routeSet = createLocatedRouteSetFor(junctionSet.$$junctionSetMeta, rootParentOptions, routeSetOptions);

    // Emit null insteaed of undefined to indicate that it is still a known route
    return junctionSet.$$junctionSetMeta.isSingle ? _routeSet.main || null : _routeSet;
  }

  var junctionPaths = walkOrder.map(function (key) {
    return key.split('#');
  });
  for (var i = 0, len = walkOrder.length; i < len; i++) {
    var stateKey = walkOrder[i];
    var junctionPath = junctionPaths[i];
    var key = junctionPath.slice(-1);

    var routeSetOptionsNode = routeSetOptions;
    var junctionSetNode = junctionSet;
    for (var _i = 0, _len = junctionPath.length - 1; _i < _len; _i++) {
      var _key = junctionPath[_i];
      var junctionNode = junctionSetNode[_key];
      var routeOptionsNode = routeSetOptionsNode[_key];
      routeSetOptionsNode = routeOptionsNode.next;
      junctionSetNode = junctionNode[routeOptionsNode.branch.key].next;
    }

    var junction = junctionSetNode[key];
    var _state$stateKey = state[stateKey],
        branchKey = _state$stateKey.branchKey,
        serializedParams = _state$stateKey.serializedParams,
        routePath = _state$stateKey.routePath;

    var branch = junction[branchKey];
    var params = (0, _Params.addDefaultParams)(branch.paramTypes, (0, _Params.deserializeParams)(branch.paramTypes, serializedParams));
    var isRouteInPath = !!routePath;

    // Copy all state paths except our next
    var newBaseState = {};
    var newBaseQuery = {};
    var newBasePath = basePath;
    var j = 0;
    while (j < i) {
      var _stateKey = walkOrder[j];
      // Only state keys returned by the path parser have a `routePath` attribute,
      // so we can use these to build our basePath
      if (state[_stateKey].routePath) {
        newBasePath = (0, _joinPaths2.default)(basePath, state[_stateKey].routePath);

        if (state[_stateKey].queryParts) {
          Object.assign(newBaseQuery, state[_stateKey].queryParts);
        }
      } else {
        newBaseState[_stateKey] = state[_stateKey];
      }
      j++;
    }
    while (j < len && junctionPaths[j].length >= junctionPath.length) {
      j++;
    }
    while (j < len) {
      var _stateKey2 = walkOrder[j];
      newBaseState[_stateKey2] = state[_stateKey2];
      j++;
    }

    var routeParentBaseLocation = {
      pathname: newBasePath,
      hash: baseLocation.hash,
      state: Object.assign({}, baseLocation.state, {
        $$junctions: newBaseState
      }),
      query: Object.assign({}, baseLocation.query, newBaseQuery)
    };

    routeSetOptionsNode[key] = {
      baseLocation: getRouteBaseLocation(routeParentBaseLocation, isRouteInPath, junctionPath, branch, params),
      isRouteInPath: isRouteInPath,
      junctionPath: junctionPath,
      branch: branch,
      params: params,
      next: {}
    };
  }

  var routeSet = createLocatedRouteSetFor(junctionSet.$$junctionSetMeta, rootParentOptions, routeSetOptions);

  // Emit null insteaed of undefined to indicate that it is still a known route
  return junctionSet.$$junctionSetMeta.isSingle ? routeSet.main || null : routeSet;
}