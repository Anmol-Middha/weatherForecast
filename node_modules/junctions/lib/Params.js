'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createParamType = createParamType;
exports.deserializeParams = deserializeParams;
exports.serializeParams = serializeParams;
exports.addDefaultParams = addDefaultParams;
var nonEmptyStringSerialier = {
  serialize: function serialize(x) {
    return x || '';
  },
  deserialize: function deserialize(x) {
    return x == '' ? null : x;
  }
};

/**
 * Define a parameter which is available for all Routes through a specific branch.
 * 
 * @param {Object}          options
 * @param {function | any}  options.default     A default value, or function to generate one
 * @param {boolean}         options.required    Throw an error if a route is created without this param
 * @param {Serializer}      options.serializer  How to serialize/deserialize
 */
function createParamType() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var serializer = void 0;
  if (options !== true && 'serializer' in options) {
    if (!options.serializer || typeof options.serializer.serialize !== 'function' || typeof options.serializer.deserialize !== 'function') {
      throw new Error('A junctions Serializer must specify serialize, deserialize');
    }

    serializer = {
      serialize: options.serializer.serialize,
      deserialize: options.serializer.deserialize
    };
  } else {
    serializer = nonEmptyStringSerialier;
  }

  var param = {
    default: options.default,
    required: options.required || false,
    serializer: serializer
  };

  return param;
}

function deserializeParams(paramTypes, params) {
  var deserializedParams = {};
  var keys = Object.keys(params);
  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    var serializer = paramTypes[key].serializer;
    var serializedValue = params[key];
    deserializedParams[key] = serializer.deserialize(decodeURIComponent(serializedValue));
  }
  return deserializedParams;
}

function serializeParams(paramTypes, params) {
  var serializedParams = {};
  var keys = Object.keys(params);
  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    var serializedValue = encodeURIComponent(paramTypes[key].serializer.serialize(params[key]));
    if (serializedValue !== undefined) {
      serializedParams[key] = serializedValue;
    }
  }
  return serializedParams;
}

function addDefaultParams(paramTypes) {
  var knownParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var paramKeys = Object.keys(knownParams);
  var remainingParamKeys = Object.keys(paramTypes);
  var paramsCopy = Object.assign({}, knownParams);

  for (var i = 0, len = paramKeys.length; i < len; i++) {
    var key = paramKeys[i];
    var paramType = paramTypes[key];

    if (!paramType) {
      throw new Error('Could not create a route. A param with key \'' + key + '\' was specified, but this key is not listed in the corresponding Branche\'s params.');
    }

    remainingParamKeys.splice(remainingParamKeys.indexOf(key), 1);
  }

  for (var _i = 0, _len = remainingParamKeys.length; _i < _len; _i++) {
    var _key = remainingParamKeys[_i];
    var _paramType = paramTypes[_key];
    var defaultParam = _paramType.default;
    if (defaultParam) {
      paramsCopy[_key] = typeof defaultParam == 'function' ? defaultParam() : defaultParam;
    } else if (_paramType.required) {
      throw new Error('Cannot create route without required key \'' + _key + '\'');
    }
  }

  return paramsCopy;
}