'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = JunctionSet;

var _TypeGuards = require('./TypeGuards');

var NODE_ENV = typeof process !== 'undefined' ? process.env.NODE_ENV : 'development';

function JunctionSet(options) {
  if (options.$$junctionSetMeta) return options;

  var isSingle = (0, _TypeGuards.isJunction)(options);
  var primaryKey = isSingle || options.main ? 'main' : undefined;
  var junctions = isSingle ? { main: options } : Object.assign({}, options);
  var junctionKeys = Object.keys(junctions);
  var junctionSetMeta = {
    junctions: junctions,
    junctionKeys: junctionKeys,
    primaryKey: primaryKey,
    isSingle: isSingle,
    queryKeys: primaryKey ? junctions[primaryKey].$$junctionMeta.queryKeys : []
  };
  Object.defineProperty(junctions, '$$junctionSetMeta', { value: junctionSetMeta });
  Object.freeze(junctions);

  if (NODE_ENV !== 'production' && !isSingle) {
    if (junctionKeys.length === 0) {
      throw new Error('JunctionSet requires at least one Junction to be passed in');
    }

    for (var i = 0, len = junctionKeys.length; i < len; i++) {
      var key = junctionKeys[i];

      if (!(0, _TypeGuards.isJunction)(junctions[key])) {
        throw new Error('An object was passed to JunctionSet which is not a Junction. See key "' + key + '"');
      }
      if (!/^[A-Za-z0-9_]+$/.test(key)) {
        throw new Error('JunctionSet keys must only use the characters A-Z, a-z, 0-9 or _. See key "' + key + '"');
      }
    }
  }

  return junctions;
}