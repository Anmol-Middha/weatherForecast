'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compilePattern = compilePattern;
exports.formatPattern = formatPattern;
function compilePattern(path, availableParamNames) {
  if (/\/{2,}/.test(path)) {
    throw new Error('Pattern "' + path + '" must not have adjacent "/" characters');
  }
  if (path[0] !== '/') {
    throw new Error('Pattern "' + path + '" must start with the "/" character');
  }
  if (path[path.length - 1] === '/') {
    throw new Error('Pattern "' + path + '" must not end with the "/" character');
  }
  if (!/^([A-Za-z0-9\$\-_\.+!*'\(\),\/]|\/:)+$/.test(path)) {
    throw new Error('Pattern "' + path + '" must be composed of the / character and the URL-safe characters: A-Z a-z 0-9 $ - _ . + ! * \' ( ) ,');
  }

  var parts = path.split('/').slice(1);
  var paramNames = parts.map(function (part, i) {
    return part[0] == ':' && part.substr(1);
  }).filter(function (x) {
    return x;
  });

  for (var i = 0, len = paramNames.length; i < len; i++) {
    if (availableParamNames.indexOf(paramNames[i]) === -1) {
      throw new Error('Pattern "' + path + '" refers to an unknown param "' + paramNames[i] + '"');
    }
  }

  return {
    path: path,
    parts: parts.map(function (part) {
      return part[0] == ':' ? null : part;
    }),
    paramNames: paramNames
  };
}

function formatPattern(pattern, params) {
  var paramValues = [];
  for (var i = 0, len = pattern.paramNames.length; i < len; i++) {
    var name = pattern.paramNames[i];
    var value = params[name];
    if (!value) {
      throw new Error('Required route param "' + name + '" was not found');
    }
    paramValues.push(value);
  }
  if (Object.keys(params).length > pattern.paramNames.length) {
    throw new Error('Unknown params passed to route. Known params: ' + pattern.paramNames.join(', ') + '. Received params: ' + Object.keys(params).join(', ') + '.');
  }
  var parts = [];
  for (var _i = 0, _len = pattern.parts.length; _i < _len; _i++) {
    var part = pattern.parts[_i];
    parts.push(part === null ? paramValues.shift() : part);
  }
  return parts.join('/');
}