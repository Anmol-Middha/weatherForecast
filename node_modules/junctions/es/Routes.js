'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocatedRoute = exports.Route = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.createRoute = createRoute;

var _desugarNext = require('./desugarNext');

var _desugarNext2 = _interopRequireDefault(_desugarNext);

var _getLocationFromRouteSet = require('./getLocationFromRouteSet');

var _getLocationFromRouteSet2 = _interopRequireDefault(_getLocationFromRouteSet);

var _SearchUtils = require('./utils/SearchUtils');

var _Params = require('./Params');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Route = exports.Route = function () {
  function Route(branch) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Route);

    this.childRouteSet = next;

    this.branch = branch;
    this.next = branch.next && (branch.next.$$junctionSetMeta.isSingle ? next.main : next);
    this.data = branch.data;
    this.key = branch.key;
    this.params = params;
  }

  _createClass(Route, [{
    key: 'locate',
    value: function locate() {
      throw new Error('You cannot access the \'locate\' function on routes created directly with Branch. Instead, use the \'link\' passed in via your component\'s props.');
    }
  }]);

  return Route;
}();

var LocatedRoute = exports.LocatedRoute = function (_Route) {
  _inherits(LocatedRoute, _Route);

  function LocatedRoute(baseLocation, isRouteInPath, junctionPath, branch, params, next) {
    _classCallCheck(this, LocatedRoute);

    var _this = _possibleConstructorReturn(this, (LocatedRoute.__proto__ || Object.getPrototypeOf(LocatedRoute)).call(this, branch, params, next));

    _this.baseLocation = baseLocation;
    _this.isRouteInPath = isRouteInPath;
    _this.junctionPath = junctionPath;

    _this.locate = function () {
      for (var _len = arguments.length, next = Array(_len), _key = 0; _key < _len; _key++) {
        next[_key] = arguments[_key];
      }

      var location = next.length > 0 ? (0, _getLocationFromRouteSet2.default)(_this.baseLocation, _this.isRouteInPath, _this.junctionPath, _this.branch.next, next) : Object.assign({}, _this.baseLocation);

      location.search = (0, _SearchUtils.createSearch)(location.query);
      delete location.query;

      return Object.freeze(location);
    };

    Object.freeze(_this);
    return _this;
  }

  return LocatedRoute;
}(Route);

function createRoute(branch, params) {
  for (var _len2 = arguments.length, next = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    next[_key2 - 2] = arguments[_key2];
  }

  var desugaredNext = (0, _desugarNext2.default)(branch.next, next) || {};

  var childKeys = Object.keys(desugaredNext);
  for (var i = 0, len = childKeys.length; i < len; i++) {
    var key = childKeys[i];
    if (!branch.next[key]) {
      throw new Error('A Route cannot be created with child key "' + key + '" which is not in the associated branch\'s next');
    }
    if (desugaredNext[key] && !(desugaredNext[key] instanceof Route)) {
      throw new Error('A Route cannot be created with a non-Route child (see child key "' + key + '")');
    }
    if (desugaredNext[key] && !branch.next[key].$$junctionMeta.branchValues.includes(desugaredNext[key].branch)) {
      throw new Error('A Route cannot be created with an unknown Branch type for key "' + key + '"');
    }
  }

  return Object.freeze(new Route(branch, (0, _Params.addDefaultParams)(branch.paramTypes, params), desugaredNext));
}